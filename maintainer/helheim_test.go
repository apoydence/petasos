// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package maintainer_test

import "github.com/apoydence/petasos/router"

type mockRangeMetrics struct {
	MetricsCalled chan bool
	MetricsInput  struct {
		File chan string
	}
	MetricsOutput struct {
		Metric chan router.Metric
		Err    chan error
	}
}

func newMockRangeMetrics() *mockRangeMetrics {
	m := &mockRangeMetrics{}
	m.MetricsCalled = make(chan bool, 100)
	m.MetricsInput.File = make(chan string, 100)
	m.MetricsOutput.Metric = make(chan router.Metric, 100)
	m.MetricsOutput.Err = make(chan error, 100)
	return m
}
func (m *mockRangeMetrics) Metrics(file string) (metric router.Metric, err error) {
	m.MetricsCalled <- true
	m.MetricsInput.File <- file
	return <-m.MetricsOutput.Metric, <-m.MetricsOutput.Err
}

type mockFileSystem struct {
	CreateCalled chan bool
	CreateInput  struct {
		File chan string
	}
	CreateOutput struct {
		Err chan error
	}
	ListCalled chan bool
	ListOutput struct {
		File chan []string
		Err  chan error
	}
}

func newMockFileSystem() *mockFileSystem {
	m := &mockFileSystem{}
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.File = make(chan string, 100)
	m.CreateOutput.Err = make(chan error, 100)
	m.ListCalled = make(chan bool, 100)
	m.ListOutput.File = make(chan []string, 100)
	m.ListOutput.Err = make(chan error, 100)
	return m
}
func (m *mockFileSystem) Create(file string) (err error) {
	m.CreateCalled <- true
	m.CreateInput.File <- file
	return <-m.CreateOutput.Err
}
func (m *mockFileSystem) List() (file []string, err error) {
	m.ListCalled <- true
	return <-m.ListOutput.File, <-m.ListOutput.Err
}
