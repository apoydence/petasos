// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package metrics_test

import "github.com/apoydence/petasos/router"

type mockRouter struct {
	MetricsCalled chan bool
	MetricsInput  struct {
		File chan string
	}
	MetricsOutput struct {
		Metric chan router.Metric
	}
}

func newMockRouter() *mockRouter {
	m := &mockRouter{}
	m.MetricsCalled = make(chan bool, 100)
	m.MetricsInput.File = make(chan string, 100)
	m.MetricsOutput.Metric = make(chan router.Metric, 100)
	return m
}
func (m *mockRouter) Metrics(file string) (metric router.Metric) {
	m.MetricsCalled <- true
	m.MetricsInput.File <- file
	return <-m.MetricsOutput.Metric
}

type mockMetrics struct {
	MetricsCalled chan bool
	MetricsInput  struct {
		File chan string
	}
	MetricsOutput struct {
		Metric chan router.Metric
		Err    chan error
	}
}

func newMockMetrics() *mockMetrics {
	m := &mockMetrics{}
	m.MetricsCalled = make(chan bool, 100)
	m.MetricsInput.File = make(chan string, 100)
	m.MetricsOutput.Metric = make(chan router.Metric, 100)
	m.MetricsOutput.Err = make(chan error, 100)
	return m
}
func (m *mockMetrics) Metrics(file string) (metric router.Metric, err error) {
	m.MetricsCalled <- true
	m.MetricsInput.File <- file
	return <-m.MetricsOutput.Metric, <-m.MetricsOutput.Err
}

type mockNetworkReader struct {
	ReadMetricsCalled chan bool
	ReadMetricsInput  struct {
		Addr, File chan string
	}
	ReadMetricsOutput struct {
		Metric chan router.Metric
		Err    chan error
	}
}

func newMockNetworkReader() *mockNetworkReader {
	m := &mockNetworkReader{}
	m.ReadMetricsCalled = make(chan bool, 100)
	m.ReadMetricsInput.Addr = make(chan string, 100)
	m.ReadMetricsInput.File = make(chan string, 100)
	m.ReadMetricsOutput.Metric = make(chan router.Metric, 100)
	m.ReadMetricsOutput.Err = make(chan error, 100)
	return m
}
func (m *mockNetworkReader) ReadMetrics(addr, file string) (metric router.Metric, err error) {
	m.ReadMetricsCalled <- true
	m.ReadMetricsInput.Addr <- addr
	m.ReadMetricsInput.File <- file
	return <-m.ReadMetricsOutput.Metric, <-m.ReadMetricsOutput.Err
}
