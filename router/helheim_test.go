// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package router_test

import "github.com/apoydence/petasos/router"

type mockWriter struct {
	WriteCalled chan bool
	WriteInput  struct {
		Data chan []byte
	}
	WriteOutput struct {
		Err chan error
	}
}

func newMockWriter() *mockWriter {
	m := &mockWriter{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.Data = make(chan []byte, 100)
	m.WriteOutput.Err = make(chan error, 100)
	return m
}
func (m *mockWriter) Write(data []byte) (err error) {
	m.WriteCalled <- true
	m.WriteInput.Data <- data
	return <-m.WriteOutput.Err
}

type mockFileSystem struct {
	ListCalled chan bool
	ListOutput struct {
		File chan []string
		Err  chan error
	}
	WriterCalled chan bool
	WriterInput  struct {
		Name chan string
	}
	WriterOutput struct {
		Writer chan router.Writer
		Err    chan error
	}
}

func newMockFileSystem() *mockFileSystem {
	m := &mockFileSystem{}
	m.ListCalled = make(chan bool, 100)
	m.ListOutput.File = make(chan []string, 100)
	m.ListOutput.Err = make(chan error, 100)
	m.WriterCalled = make(chan bool, 100)
	m.WriterInput.Name = make(chan string, 100)
	m.WriterOutput.Writer = make(chan router.Writer, 100)
	m.WriterOutput.Err = make(chan error, 100)
	return m
}
func (m *mockFileSystem) List() (file []string, err error) {
	m.ListCalled <- true
	return <-m.ListOutput.File, <-m.ListOutput.Err
}
func (m *mockFileSystem) Writer(name string) (writer router.Writer, err error) {
	m.WriterCalled <- true
	m.WriterInput.Name <- name
	return <-m.WriterOutput.Writer, <-m.WriterOutput.Err
}

type mockHasher struct {
	HashCalled chan bool
	HashInput  struct {
		Data chan []byte
	}
	HashOutput struct {
		Hash chan uint64
		Err  chan error
	}
}

func newMockHasher() *mockHasher {
	m := &mockHasher{}
	m.HashCalled = make(chan bool, 100)
	m.HashInput.Data = make(chan []byte, 100)
	m.HashOutput.Hash = make(chan uint64, 100)
	m.HashOutput.Err = make(chan error, 100)
	return m
}
func (m *mockHasher) Hash(data []byte) (hash uint64, err error) {
	m.HashCalled <- true
	m.HashInput.Data <- data
	return <-m.HashOutput.Hash, <-m.HashOutput.Err
}

type mockMetricsCounter struct {
	IncSuccessCalled chan bool
	IncSuccessInput  struct {
		Name chan router.RangeName
	}
	IncFailureCalled chan bool
	IncFailureInput  struct {
		Name chan router.RangeName
	}
}

func newMockMetricsCounter() *mockMetricsCounter {
	m := &mockMetricsCounter{}
	m.IncSuccessCalled = make(chan bool, 100)
	m.IncSuccessInput.Name = make(chan router.RangeName, 100)
	m.IncFailureCalled = make(chan bool, 100)
	m.IncFailureInput.Name = make(chan router.RangeName, 100)
	return m
}
func (m *mockMetricsCounter) IncSuccess(name router.RangeName) {
	m.IncSuccessCalled <- true
	m.IncSuccessInput.Name <- name
}
func (m *mockMetricsCounter) IncFailure(name router.RangeName) {
	m.IncFailureCalled <- true
	m.IncFailureInput.Name <- name
}
