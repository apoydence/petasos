// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package reader_test

import "github.com/poy/petasos/reader"

type mockFileSystem struct {
	ListCalled chan bool
	ListOutput struct {
		File chan []string
		Err  chan error
	}
	ReaderCalled chan bool
	ReaderInput  struct {
		Name          chan string
		StartingIndex chan uint64
	}
	ReaderOutput struct {
		Reader chan reader.Reader
		Err    chan error
	}
}

func newMockFileSystem() *mockFileSystem {
	m := &mockFileSystem{}
	m.ListCalled = make(chan bool, 100)
	m.ListOutput.File = make(chan []string, 100)
	m.ListOutput.Err = make(chan error, 100)
	m.ReaderCalled = make(chan bool, 100)
	m.ReaderInput.Name = make(chan string, 100)
	m.ReaderInput.StartingIndex = make(chan uint64, 100)
	m.ReaderOutput.Reader = make(chan reader.Reader, 100)
	m.ReaderOutput.Err = make(chan error, 100)
	return m
}
func (m *mockFileSystem) List() (file []string, err error) {
	m.ListCalled <- true
	return <-m.ListOutput.File, <-m.ListOutput.Err
}
func (m *mockFileSystem) Reader(name string, startingIndex uint64) (reader reader.Reader, err error) {
	m.ReaderCalled <- true
	m.ReaderInput.Name <- name
	m.ReaderInput.StartingIndex <- startingIndex
	return <-m.ReaderOutput.Reader, <-m.ReaderOutput.Err
}

type mockReader struct {
	ReadCalled chan bool
	ReadOutput struct {
		Data chan reader.DataPacket
		Err  chan error
	}
	CloseCalled chan bool
}

func newMockReader() *mockReader {
	m := &mockReader{}
	m.ReadCalled = make(chan bool, 100)
	m.ReadOutput.Data = make(chan reader.DataPacket, 100)
	m.ReadOutput.Err = make(chan error, 100)
	m.CloseCalled = make(chan bool, 100)
	return m
}
func (m *mockReader) Read() (data reader.DataPacket, err error) {
	m.ReadCalled <- true
	return <-m.ReadOutput.Data, <-m.ReadOutput.Err
}
func (m *mockReader) Close() {
	m.CloseCalled <- true
}
